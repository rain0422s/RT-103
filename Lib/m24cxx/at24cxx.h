#ifndef _AT24CXX_H_
#define _AT24CXX_H_

#include "i2cdev.h"
#include <stdbool.h>
#include "utils.h"

// at24cxx address (A2A1A0)
enum {
    AT24CXX_ADDRESS_A000 = 0x50,
    AT24CXX_ADDRESS_A001,
    AT24CXX_ADDRESS_A010,
    AT24CXX_ADDRESS_A011,
    AT24CXX_ADDRESS_A100,
    AT24CXX_ADDRESS_A101,
    AT24CXX_ADDRESS_A110,
    AT24CXX_ADDRESS_A111,
};

#define AT24C02                                 // <---
#define AT24CXX_DEV (AT24CXX_ADDRESS_A000 << 1)  // <---
#define AT24CXX_I2C hi2c2                        // <---

// 二线制串行（I2C）EEPROM AT24CXX 系列的操作具有 1K、2K、4K、8K、16K、32K、64K、
// 128K、256K、512K、1M、2M 等多种容量，不同容量其采用的设备地址位、寄存器地址位
// 存在差异每一页所包含的字节数也不一样。

// 有些容量的设备地址段有些位用于寄存器地址（P）寻址，设备地址的可设定位数（A）
// 决定了同一总线上所挂载的器件数量：
// 3位用于设备地址，0位用于内存寻址：可挂载8个；
// 2位用于设备地址，1位用于内存寻址：可挂载4个；
// 1位用于设备地址，2位用于内存寻址：可挂载2个；
// 0位用于设备地址，3位用于内存寻址：可挂载1个；

/******************************************************************************/
/**  +----------+-------------+--------------------+---------------+--------+**/
/**  |   型号   |  容量结构   |     设备地址位     |   寄存器地址  |每页字节|**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C01C  |128x8(1K)    |1|0|1|0|A2|A1|A0|R/W|7位(1个寄存器) |  8字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C01D  |128x8(1K)    |1|0|1|0|A2|A1|A0|R/W|7位(1个寄存器) |  8字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C02C  |256x8(2K)    |1|0|1|0|A2|A1|A0|R/W|8位(1个寄存器) |  8字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C02D  |256x8(2K)    |1|0|1|0|A2|A1|A0|R/W|8位(1个寄存器) |  8字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C04C  |512x8(4K)    |1|0|1|0|A2|A1|P0|R/W|9位(1个寄存器) | 16字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C04D  |512x8(4K)    |1|0|1|0|A2|A1|P0|R/W|9位(1个寄存器) | 16字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C08C  |1024x8(8K)   |1|0|1|0|A2|P1|P0|R/W|10位(1个寄存器)| 16字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C08D  |1024x8(8K)   |1|0|1|0|A2|P1|P0|R/W|10位(1个寄存器)| 16字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C16C  |2048x8(16K)  |1|0|1|0|P2|P1|P0|R/W|11位(1个寄存器)| 16字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C16D  |2048x8(16K)  |1|0|1|0|P2|P1|P0|R/W|11位(1个寄存器)| 16字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C32D  |4096x8(32K)  |1|0|1|0|A2|A1|A0|R/W|12位(2个寄存器)| 32字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C32E  |4096x8(32K)  |1|0|1|0|A2|A1|A0|R/W|12位(2个寄存器)| 32字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C64B  |8192x8(64K)  |1|0|1|0|A2|A1|A0|R/W|13位(2个寄存器)| 32字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C64D  |8192x8(64K)  |1|0|1|0|A2|A1|A0|R/W|13位(2个寄存器)| 32字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C128C |16384x8(128K)|1|0|1|0|A2|A1|A0|R/W|14位(2个寄存器)| 64字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C256C |32768x8(256K)|1|0|1|0|A2|A1|A0|R/W|15位(2个寄存器)| 64字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24C512C |65536x8(512K)|1|0|1|0|A2|A1|A0|R/W|16位(2个寄存器)| 128字节|**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24CM01  |131072x8(1M) |1|0|1|0|A2|A1|P0|R/W|17位(2个寄存器)| 256字节|**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24CM02  |262144x8(2M) |1|0|1|0|A2|P1|P0|R/W|18位(2个寄存器)| 256字节|**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24CS01  |128x8(1K)    |1|0|1|0|A2|A1|A0|R/W|7位(1个寄存器) |  8字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24CS02  |256x8(2K)    |1|0|1|0|A2|A1|A0|R/W|8位(1个寄存器) |  8字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24CS04  |512x8(4K)    |1|0|1|0|A2|A1|P0|R/W|9位(1个寄存器) | 16字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24CS08  |1024x8(8K)   |1|0|1|0|A2|P1|P0|R/W|10位(1个寄存器)| 16字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24CS16  |2048x8(16K)  |1|0|1|0|P2|P1|P0|R/W|11位(1个寄存器)| 16字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24CS32  |4096x8(32K)  |1|0|1|0|A2|A1|A0|R/W|12位(2个寄存器)| 32字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24CS64  |8192x8(64K)  |1|0|1|0|A2|A1|A0|R/W|13位(2个寄存器)| 32字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24CSW010|128x8(1K)    |1|0|1|0|A2|A1|A0|R/W|7位(1个寄存器) |  8字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24CSW020|256x8(2K)    |1|0|1|0|A2|A1|A0|R/W|8位(1个寄存器) |  8字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24CSW040|512x8(4K)    |1|0|1|0|A2|A1|P0|R/W|9位(1个寄存器) | 16字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24CSW080|1024x8(8K)   |1|0|1|0|A2|P1|P0|R/W|10位(1个寄存器)| 16字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24HC02C |256x8(2K)    |1|0|1|0|A2|A1|A0|R/W|8位(1个寄存器) |  8字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24HC04B |512x8(4K)    |1|0|1|0|A2|A1|P0|R/W|9位(1个寄存器) | 16字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24MAC402|256x8(2K)    |1|0|1|0|A2|A1|A0|R/W|8位(1个寄存器) | 16字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/**  |AT24MAC602|256x8(2K)    |1|0|1|0|A2|A1|A0|R/W|8位(1个寄存器) | 16字节 |**/
/**  +----------+-------------+-+-+-+-+--+--+--+---+---------------+--------+**/
/******************************************************************************/

// kB
#if defined AT24C01
#define AT24CXX_MAX_SIZE 128
#elif defined AT24C02
#define AT24CXX_MAX_SIZE 256
#elif defined AT24C04
#define AT24CXX_MAX_SIZE 512
#elif defined AT24C08
#define AT24CXX_MAX_SIZE 1024
#elif defined AT24C16
#define AT24CXX_MAX_SIZE 2048
#elif defined AT24C32
#define AT24CXX_MAX_SIZE 4096
#elif defined AT24C64
#define AT24CXX_MAX_SIZE 8192
#elif defined AT24C128
#define AT24CXX_MAX_SIZE 16384
#elif defined AT24C256
#define AT24CXX_MAX_SIZE 32768
#endif

#define AT24CXX_MIN_ADDR 0
#define AT24CXX_MAX_ADDR (AT24CXX_MAX_SIZE - 1)

#define AT24CXX_PAGE_SIZE  8  // kB
#define AT24CXX_PAGE_COUNT (AT24CXX_MAX_SIZE / AT24CXX_PAGE_SIZE)

////////////////////////////////////////////

bool at24cxx_read(struct i2c_cli at24cxx ,uint16_t addr, uint8_t* buff, uint16_t len);
bool at24cxx_write(struct i2c_cli at24cxx ,uint16_t addr, uint8_t* buff, uint16_t len);

bool at24cxx_print(struct i2c_cli at24cxx ,uint16_t start, uint16_t len, uint8_t wrap_num);
#define at24cxx_print_all(at24cxx ) at24cxx_print(at24cxx ,0, AT24CXX_MAX_ADDR, 32)

#define at24cxx_write_variable(at24cxx ,addr, variable) at24cxx_write(at24cxx ,addr, (uint8_t*)&variable, sizeof(variable))
#define at24cxx_read_variable(at24cxx ,addr, variable)  at24cxx_read(at24cxx ,addr, (uint8_t*)&variable, sizeof(variable))

////////////////////////////////////////////

enum {
    // 8-bit mem addr
    AT24C01C,
    AT24C01D,
    AT24C02C,
    AT24C02D,
    AT24C04C,
    AT24C04D,
    AT24C08C,
    AT24C08D,
    AT24C16C,
    AT24C16D,

    // 16-bit mem addr
    AT24C32D,
    AT24C32E,
    AT24C64B,
    AT24C64D,
    AT24C128C,
    AT24C256C,
    AT24C512C,
    AT24CM01,
    AT24CM02,

    // 8-bit mem addr
    AT24CS01,
    AT24CS02,
    AT24CS04,
    AT24CS08,
    AT24CS16,

    // 16-bit mem addr
    AT24CS32,
    AT24CS64,

    // 8-bit mem addr
    AT24CSW010,
    AT24CSW020,
    AT24CSW040,
    AT24CSW080,
    AT24HC02C,
    AT24HC04B,
    AT24MAC402,
    AT24MAC602,

    //

    AT24_CNT,
};

static uint8_t devAddMask[AT24_CNT] =
    {0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xF0,
     0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xF8, 0xFE,
     0xFE, 0xFC, 0xF8, 0xF0, 0xFE, 0xFE, 0xFE, 0xFE, 0xFC, 0xF8,
     0xFE, 0xFC, 0xFE, 0xFE};

static uint8_t pageBytes[AT24_CNT] =
    {8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 32, 32, 32, 32, 64, 64,
     128, 256, 256, 8, 8, 16, 16, 16, 32, 32, 8, 8, 16, 16, 8, 16, 16, 16};

static uint8_t regAddMask[AT24_CNT] =
    {0x07, 0x07, 0x07, 0x07, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
     0x1F, 0x1F, 0x1F, 0x1F, 0x3F, 0x3F, 0x7F, 0xFF, 0xFF, 0x07,
     0x07, 0x0F, 0x0F, 0x0F, 0x1F, 0x1F, 0x07, 0x07, 0x0F, 0x0F,
     0x07, 0x0F, 0x0F, 0x0F};


#endif
